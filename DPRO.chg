"6:58:05 PM, Wednesday, March 30, 2016: Compressed sources"!

DevelopmentSessionManager installNew!

SessionManager current defaultResourceLibrary loadFlags: 0.
SessionManager current stashBootInfo!

"Ensure all structures have calculated size to avoid recompilation messages later"
ExternalStructure allSubclasses do: [:e | e byteSize]!

"Mark all the booted packages as base"
Package manager markAllPackagesAsBase!

SessionManager current saveImage!

"6:59:05 PM, Wednesday, March 30, 2016: Image saved"!

"Remove rogue .img and unnecessary .chg files"
File delete: (File default: SessionManager current imagePath extension: 'img').
File delete: 'DBOOT.chg'!

SessionManager current quit!

"11:02:21, sábado, 12 de octubre de 2024: Dolphin Smalltalk Professional started"!

"11:02:48, sábado, 12 de octubre de 2024: Image saved"!

"11:03:27, sábado, 12 de octubre de 2024: Dolphin Smalltalk Professional started"!

"11:33:52, martes, 15 de octubre de 2024: Dolphin Smalltalk Professional started"!

Object subclass: #Hotel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!
Hotel comment: ''!
!Hotel categoriesForClass!Kernel-Objects! !
Object subclass: #Hotel
	instanceVariableNames: 'nombre'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono area'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono area reserva'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono area reservas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCalf tel:unTel! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initnom:unNom dir:unaDir cal:unaCal! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initnom:unNom dir:unaDir cal:unaCal tel:unTel .! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

Hotel class instanceVariableNames: 'habitaciones'!

Hotel class instanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initnom:unNom dir:unaDir cal:unaCal tel:unTel .! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
verNombre
! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verDireccion
^direccion.! !
!Hotel categoriesFor: #verDireccion!public! !

!Hotel methodsFor!
verCalificacion
^calificacion.! !
!Hotel categoriesFor: #verCalificacion!public! !

!Hotel methodsFor!
verTelefono
^telefono.
! !
!Hotel categoriesFor: #verTelefono!public! !

!Hotel methodsFor!
agregarArea:unaArea
areas add: unaArea.! !
!Hotel categoriesFor: #agregarArea:!public! !

!Hotel methodsFor!
agregarReserva:unaRes! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarHabitaciones:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitaciones:!public! !

!Hotel methodsFor!
agregarServicio:unServ
servicios add: unServ.! !
!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel methodsFor!
modiNom:unNom
^nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiNom:unNom
^nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiDir:unaDir
^direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiCal:unaCal
^calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
modiTel:unTel
^telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
modiTel:unTel
telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
modiNom:unNom
nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiDir:unaDir
direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiCal:unaCal
calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
eliminarArea:unaArea
areas remove: unaArea.! !
!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel methodsFor!
eliminarReserva:unaReserva
reservas remove: unaReserva .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaReserva
reservas remove: unaReserva .! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHabitacion
habitaciones remove: unaHabitacion .! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
agregarHabitacion:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitacion:!public! !

Hotel removeSelector: #agregarHabitaciones: ifAbsent: []!

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarReserva:unaRes
reservas remove: unaRes .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarServicio:unServ
servicios remove: unServ.! !
!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel methodsFor!
existeArea:unaArea
! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas include: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas include: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones include: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios include: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
esVaciaAreas
! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas is empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas is empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas is empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones is empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios is empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarReserva: Pos
^ reservas at: Pos.! !
!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel methodsFor!
recuperarHabitacion: Pos
^ habitaciones at: Pos.! !
!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel methodsFor!
recuperarServicio: Pos
^ servicios at: Pos.! !
!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel methodsFor!
cantidadAreas
^ areas size.! !
!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadHabitaciones
^ habitaciones size.! !
!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel methodsFor!
cantidadServicios
^ servicios size.! !
!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel methodsFor!
todasLasAreas
^ areas.! !
!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel methodsFor!
todasLasReservas
^ reservas .! !
!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel methodsFor!
todasLasHabitaciones
^ habitaciones.! !
!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel methodsFor!
todosLosServicios
^ servicios.! !
!Hotel categoriesFor: #todosLosServicios!public! !

"12:40:05, martes, 15 de octubre de 2024: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!
Hotel comment: ''!

Hotel comment:
''!
!Hotel categoriesForClass!Kernel-Objects! !
!Hotel methodsFor!
agregarArea:unaArea
areas add: unaArea.! !
!Hotel categoriesFor: #agregarArea:!public! !

!Hotel methodsFor!
agregarHabitacion:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarServicio:unServ
servicios add: unServ.! !
!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel methodsFor!
cantidadAreas
^ areas size.! !
!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel methodsFor!
cantidadHabitaciones
^ habitaciones size.! !
!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadServicios
^ servicios size.! !
!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel methodsFor!
eliminarArea:unaArea
areas remove: unaArea.! !
!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarReserva:unaRes
reservas remove: unaRes .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarServicio:unServ
servicios remove: unServ.! !
!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas is empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones is empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas is empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios is empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas include: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones include: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas include: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios include: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
modiCal:unaCal
calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
modiDir:unaDir
direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiNom:unNom
nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiTel:unTel
telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarHabitacion: Pos
^ habitaciones at: Pos.! !
!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel methodsFor!
recuperarReserva: Pos
^ reservas at: Pos.! !
!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel methodsFor!
recuperarServicio: Pos
^ servicios at: Pos.! !
!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel methodsFor!
todasLasAreas
^ areas.! !
!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel methodsFor!
todasLasHabitaciones
^ habitaciones.! !
!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel methodsFor!
todasLasReservas
^ reservas .! !
!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel methodsFor!
todosLosServicios
^ servicios.! !
!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel methodsFor!
verCalificacion
^calificacion.! !
!Hotel categoriesFor: #verCalificacion!public! !

!Hotel methodsFor!
verDireccion
^direccion.! !
!Hotel categoriesFor: #verDireccion!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verTelefono
^telefono.
! !
!Hotel categoriesFor: #verTelefono!public! !

!Hotel categoriesFor: #agregarArea:!public! !

!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel categoriesFor: #existeArea:!public! !

!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel categoriesFor: #existeReserva:!public! !

!Hotel categoriesFor: #existeServicio:!public! !

!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel categoriesFor: #modiCal:!public! !

!Hotel categoriesFor: #modiDir:!public! !

!Hotel categoriesFor: #modiNom:!public! !

!Hotel categoriesFor: #modiTel:!public! !

!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel categoriesFor: #verCalificacion!public! !

!Hotel categoriesFor: #verDireccion!public! !

!Hotel categoriesFor: #verNombre!public! !

!Hotel categoriesFor: #verTelefono!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initnom:unNom dir:unaDir cal:unaCal tel:unTel .! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!

"12:41:52, martes, 15 de octubre de 2024: Image saved"!

"18:15:30, martes, 15 de octubre de 2024: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!
Hotel comment: ''!

Hotel comment:
''!
!Hotel methodsFor!
agregarArea:unaArea
areas add: unaArea.! !
!Hotel categoriesFor: #agregarArea:!public! !

!Hotel methodsFor!
agregarHabitacion:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarServicio:unServ
servicios add: unServ.! !
!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel methodsFor!
cantidadAreas
^ areas size.! !
!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel methodsFor!
cantidadHabitaciones
^ habitaciones size.! !
!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadServicios
^ servicios size.! !
!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel methodsFor!
eliminarArea:unaArea
areas remove: unaArea.! !
!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarReserva:unaRes
reservas remove: unaRes .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarServicio:unServ
servicios remove: unServ.! !
!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas is empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones is empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas is empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios is empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas include: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones include: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas include: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios include: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
modiCal:unaCal
calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
modiDir:unaDir
direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiNom:unNom
nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiTel:unTel
telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarHabitacion: Pos
^ habitaciones at: Pos.! !
!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel methodsFor!
recuperarReserva: Pos
^ reservas at: Pos.! !
!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel methodsFor!
recuperarServicio: Pos
^ servicios at: Pos.! !
!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel methodsFor!
todasLasAreas
^ areas.! !
!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel methodsFor!
todasLasHabitaciones
^ habitaciones.! !
!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel methodsFor!
todasLasReservas
^ reservas .! !
!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel methodsFor!
todosLosServicios
^ servicios.! !
!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel methodsFor!
verCalificacion
^calificacion.! !
!Hotel categoriesFor: #verCalificacion!public! !

!Hotel methodsFor!
verDireccion
^direccion.! !
!Hotel categoriesFor: #verDireccion!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verTelefono
^telefono.
! !
!Hotel categoriesFor: #verTelefono!public! !

!Hotel categoriesFor: #agregarArea:!public! !

!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel categoriesFor: #existeArea:!public! !

!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel categoriesFor: #existeReserva:!public! !

!Hotel categoriesFor: #existeServicio:!public! !

!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel categoriesFor: #modiCal:!public! !

!Hotel categoriesFor: #modiDir:!public! !

!Hotel categoriesFor: #modiNom:!public! !

!Hotel categoriesFor: #modiTel:!public! !

!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel categoriesFor: #verCalificacion!public! !

!Hotel categoriesFor: #verDireccion!public! !

!Hotel categoriesFor: #verNombre!public! !

!Hotel categoriesFor: #verTelefono!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initnom:unNom dir:unaDir cal:unaCal tel:unTel .! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion categoriesForClass!Kernel-Objects! !
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Reserva
	instanceVariableNames: 'fechaInicio fechaFin estadoReserva cantidadHuesped numeroHabitacion numeroReserva numeroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!
Reserva comment: ''!

Reserva comment:
''!
!Reserva categoriesForClass!Kernel-Objects! !
!Reserva methodsFor!
cantHuesped
	^cantidadHuesped.! !
!Reserva categoriesFor: #cantHuesped!public! !

!Reserva methodsFor!
initReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
fechaInicio := unaFechaIni.
fechaFin := unaFechaFin.
estadoReserva := true.
cantidadHuesped := unaCant.
numeroReserva := unNroRes.
numeroHabitacion := unNroHab.
numeroCliente := unNroCliente.! !
!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva methodsFor!
modiEstadoReserva:unEstado
estadoReserva := unEstado.! !
!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva methodsFor!
modiFechaFin:unaFecha
fechaFin := unaFecha.! !
!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva methodsFor!
modiFechaInicio:unaFecha 
fechaInicio := unaFecha.! !
!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva methodsFor!
modiNumeroHabitacion:unNro
numeroHabitacion := unNro.! !
!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva methodsFor!
verEstadoReserva
	^estadoReserva! !
!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva methodsFor!
verFechaFin
	^fechaFin! !
!Reserva categoriesFor: #verFechaFin!public! !

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!public! !

!Reserva methodsFor!
verNumeroCliente
	^numeroCliente.! !
!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva methodsFor!
verNumeroHabitacion
	^numeroHabitacion! !
!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva methodsFor!
verNumeroReserva
	^numeroReserva.! !
!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva categoriesFor: #cantHuesped!public! !

!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva categoriesFor: #verFechaFin!private! !

!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva class methodsFor!
crearReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
^(self new) initReservaIni: unaFechaIni Fin: unaFechaFin cantHuesp: unaCant numHab: unNroHab nroRes: unNroRes nroCliente: unNroCliente.! !
!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Factura
	instanceVariableNames: 'nroFactura montoTotal fechaEmision estadoPago nroReserva'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Factura guid: (GUID fromString: '{7E4CED10-5658-4EAF-9E4D-42A2C5A74E13}')!

Factura guid: (GUID fromString: '{7E4CED10-5658-4EAF-9E4D-42A2C5A74E13}')!
Factura comment: ''!

Factura comment:
''!
!Factura categoriesForClass!Kernel-Objects! !
!Factura methodsFor!
CalcularMontoTotal
^ montoTotal.! !
!Factura categoriesFor: #CalcularMontoTotal!public! !

!Factura methodsFor!
initFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR
nroFactura:=numeroF.
montoTotal:=monto.
fechaEmision:=fecha.
estadoPago:=estado.
nroReserva:=numeroR.! !
!Factura categoriesFor: #initFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura methodsFor!
verEstadoPago
^ estadoPago.! !
!Factura categoriesFor: #verEstadoPago!public! !

!Factura categoriesFor: #CalcularMontoTotal!public! !

!Factura categoriesFor: #initFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura categoriesFor: #verEstadoPago!public! !

!Factura class methodsFor!
crearFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR
^(self new) initFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR.! !
!Factura class categoriesFor: #crearFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura class categoriesFor: #crearFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Reserva
	instanceVariableNames: 'fechaInicio fechaFin estadoReserva cantidadHuesped numeroHabitacion numeroReserva numeroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!
Reserva comment: ''!

Reserva comment:
''!
!Reserva methodsFor!
cantHuesped
	^cantidadHuesped.! !
!Reserva categoriesFor: #cantHuesped!public! !

!Reserva methodsFor!
initReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
fechaInicio := unaFechaIni.
fechaFin := unaFechaFin.
estadoReserva := true.
cantidadHuesped := unaCant.
numeroReserva := unNroRes.
numeroHabitacion := unNroHab.
numeroCliente := unNroCliente.! !
!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva methodsFor!
initReservaIni:unaFechaIni Fin:unaFechaFin estadoRes:unEstado cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
fechaInicio := unaFechaIni.
fechaFin := unaFechaFin.
estadoReserva := unEstado.
cantidadHuesped := unaCant.
numeroReserva := unNroRes.
numeroHabitacion := unNroHab.
numeroCliente := unNroCliente.! !
!Reserva categoriesFor: #initReservaIni:Fin:estadoRes:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva methodsFor!
modiEstadoReserva:unEstado
estadoReserva := unEstado.! !
!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva methodsFor!
modiFechaFin:unaFecha
fechaFin := unaFecha.! !
!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva methodsFor!
modiFechaInicio:unaFecha 
fechaInicio := unaFecha.! !
!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva methodsFor!
modiNumeroHabitacion:unNro
numeroHabitacion := unNro.! !
!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva methodsFor!
verEstadoReserva
	^estadoReserva! !
!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva methodsFor!
verFechaFin
	^fechaFin! !
!Reserva categoriesFor: #verFechaFin!private! !

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva methodsFor!
verNumeroCliente
	^numeroCliente.! !
!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva methodsFor!
verNumeroHabitacion
	^numeroHabitacion! !
!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva methodsFor!
verNumeroReserva
	^numeroReserva.! !
!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva categoriesFor: #cantHuesped!public! !

!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva categoriesFor: #initReservaIni:Fin:estadoRes:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva categoriesFor: #verFechaFin!private! !

!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva class methodsFor!
crearReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
^(self new) initReservaIni: unaFechaIni Fin: unaFechaFin cantHuesp: unaCant numHab: unNroHab nroRes: unNroRes nroCliente: unNroCliente.! !
!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!

!Reserva methodsFor!
verFechaInicio
^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva methodsFor!
verFechaFin
	^fechaFin! !
!Reserva categoriesFor: #verFechaFin!private! !

!Reserva methodsFor!
verFechaFin
^fechaFin.! !
!Reserva categoriesFor: #verFechaFin!private! !

!Reserva methodsFor!
verFechaInicio
^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!private! !

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{4d54f059-4431-4d85-9937-e61d0827e7b3}')!

Persona guid: (GUID fromString: '{4D54F059-4431-4D85-9937-E61D0827E7B3}')!
Persona comment: ''!

Persona comment:
''!
!Persona categoriesForClass!Kernel-Objects! !
!Persona methodsFor!
initPersonaNombre: unNombre apellido: unApellido
	nombre := unNombre.
	apellido := unApellido.! !
!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona methodsFor!
verApellido
	^apellido.! !
!Persona categoriesFor: #verApellido!public! !

!Persona methodsFor!
verNombre
	^nombre.! !
!Persona categoriesFor: #verNombre!public! !

!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verNombre!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'direccion correo telefono'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{f531c219-86da-44eb-8723-ccef5a420a6d}')!

Cliente guid: (GUID fromString: '{F531C219-86DA-44EB-8723-CCEF5A420A6D}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente categoriesForClass!Kernel-Objects! !
!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente methodsFor!
verCorreo
	^correo.! !
!Cliente categoriesFor: #verCorreo!public! !

!Cliente methodsFor!
verDireccion
	^direccion.! !
!Cliente categoriesFor: #verDireccion!public! !

!Cliente methodsFor!
verTelefono
	^telefono.! !
!Cliente categoriesFor: #verTelefono!public! !

!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente categoriesFor: #verCorreo!public! !

!Cliente categoriesFor: #verDireccion!public! !

!Cliente categoriesFor: #verTelefono!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'direccion correo telefono'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{f531c219-86da-44eb-8723-ccef5a420a6d}')!

Cliente guid: (GUID fromString: '{F531C219-86DA-44EB-8723-CCEF5A420A6D}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente methodsFor!
verCorreo
	^correo.! !
!Cliente categoriesFor: #verCorreo!public! !

!Cliente methodsFor!
verDireccion
	^direccion.! !
!Cliente categoriesFor: #verDireccion!public! !

!Cliente methodsFor!
verTelefono
	^telefono.! !
!Cliente categoriesFor: #verTelefono!public! !

!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente categoriesFor: #verCorreo!public! !

!Cliente categoriesFor: #verDireccion!public! !

!Cliente categoriesFor: #verTelefono!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{4d54f059-4431-4d85-9937-e61d0827e7b3}')!

Persona guid: (GUID fromString: '{4D54F059-4431-4D85-9937-E61D0827E7B3}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
initPersonaNombre: unNombre apellido: unApellido
	nombre := unNombre.
	apellido := unApellido.! !
!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona methodsFor!
verApellido
	^apellido.! !
!Persona categoriesFor: #verApellido!public! !

!Persona methodsFor!
verNombre
	^nombre.! !
!Persona categoriesFor: #verNombre!public! !

!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verNombre!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'direccion correo telefono'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{f531c219-86da-44eb-8723-ccef5a420a6d}')!

Cliente guid: (GUID fromString: '{F531C219-86DA-44EB-8723-CCEF5A420A6D}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente methodsFor!
verCorreo
	^correo.! !
!Cliente categoriesFor: #verCorreo!public! !

!Cliente methodsFor!
verDireccion
	^direccion.! !
!Cliente categoriesFor: #verDireccion!public! !

!Cliente methodsFor!
verTelefono
	^telefono.! !
!Cliente categoriesFor: #verTelefono!public! !

!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente categoriesFor: #verCorreo!public! !

!Cliente categoriesFor: #verDireccion!public! !

!Cliente categoriesFor: #verTelefono!public! !

!

"18:59:56, sábado, 19 de octubre de 2024: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Factura
	instanceVariableNames: 'nroFactura montoTotal fechaEmision estadoPago nroReserva'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Factura guid: (GUID fromString: '{7E4CED10-5658-4EAF-9E4D-42A2C5A74E13}')!

Factura guid: (GUID fromString: '{7E4CED10-5658-4EAF-9E4D-42A2C5A74E13}')!
Factura comment: ''!

Factura comment:
''!
!Factura categoriesForClass!Kernel-Objects! !
!Factura methodsFor!
CalcularMontoTotal
^ montoTotal.! !
!Factura categoriesFor: #CalcularMontoTotal!public! !

!Factura methodsFor!
initFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR
nroFactura:=numeroF.
montoTotal:=monto.
fechaEmision:=fecha.
estadoPago:=estado.
nroReserva:=numeroR.! !
!Factura categoriesFor: #initFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura methodsFor!
verEstadoPago
^ estadoPago.! !
!Factura categoriesFor: #verEstadoPago!public! !

!Factura categoriesFor: #CalcularMontoTotal!public! !

!Factura categoriesFor: #initFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura categoriesFor: #verEstadoPago!public! !

!Factura class methodsFor!
crearFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR
^(self new) initFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR.! !
!Factura class categoriesFor: #crearFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura class categoriesFor: #crearFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion categoriesForClass!Kernel-Objects! !
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!
Hotel comment: ''!

Hotel comment:
''!
!Hotel methodsFor!
agregarArea:unaArea
areas add: unaArea.! !
!Hotel categoriesFor: #agregarArea:!public! !

!Hotel methodsFor!
agregarHabitacion:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarServicio:unServ
servicios add: unServ.! !
!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel methodsFor!
cantidadAreas
^ areas size.! !
!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel methodsFor!
cantidadHabitaciones
^ habitaciones size.! !
!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadServicios
^ servicios size.! !
!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel methodsFor!
eliminarArea:unaArea
areas remove: unaArea.! !
!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarReserva:unaRes
reservas remove: unaRes .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarServicio:unServ
servicios remove: unServ.! !
!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas is empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones is empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas is empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios is empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas include: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones include: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas include: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios include: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
modiCal:unaCal
calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
modiDir:unaDir
direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiNom:unNom
nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiTel:unTel
telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarHabitacion: Pos
^ habitaciones at: Pos.! !
!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel methodsFor!
recuperarReserva: Pos
^ reservas at: Pos.! !
!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel methodsFor!
recuperarServicio: Pos
^ servicios at: Pos.! !
!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel methodsFor!
todasLasAreas
^ areas.! !
!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel methodsFor!
todasLasHabitaciones
^ habitaciones.! !
!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel methodsFor!
todasLasReservas
^ reservas .! !
!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel methodsFor!
todosLosServicios
^ servicios.! !
!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel methodsFor!
verCalificacion
^calificacion.! !
!Hotel categoriesFor: #verCalificacion!public! !

!Hotel methodsFor!
verDireccion
^direccion.! !
!Hotel categoriesFor: #verDireccion!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verTelefono
^telefono.
! !
!Hotel categoriesFor: #verTelefono!public! !

!Hotel categoriesFor: #agregarArea:!public! !

!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel categoriesFor: #existeArea:!public! !

!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel categoriesFor: #existeReserva:!public! !

!Hotel categoriesFor: #existeServicio:!public! !

!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel categoriesFor: #modiCal:!public! !

!Hotel categoriesFor: #modiDir:!public! !

!Hotel categoriesFor: #modiNom:!public! !

!Hotel categoriesFor: #modiTel:!public! !

!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel categoriesFor: #verCalificacion!public! !

!Hotel categoriesFor: #verDireccion!public! !

!Hotel categoriesFor: #verNombre!public! !

!Hotel categoriesFor: #verTelefono!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initnom:unNom dir:unaDir cal:unaCal tel:unTel .! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{4d54f059-4431-4d85-9937-e61d0827e7b3}')!

Persona guid: (GUID fromString: '{4D54F059-4431-4D85-9937-E61D0827E7B3}')!
Persona comment: ''!

Persona comment:
''!
!Persona categoriesForClass!Kernel-Objects! !
!Persona methodsFor!
initPersonaNombre: unNombre apellido: unApellido
	nombre := unNombre.
	apellido := unApellido.! !
!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona methodsFor!
verApellido
	^apellido.! !
!Persona categoriesFor: #verApellido!public! !

!Persona methodsFor!
verNombre
	^nombre.! !
!Persona categoriesFor: #verNombre!public! !

!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersonaNombre: unNombre apellido: unApellido
^(self new) initPersonaNombre: unNombre apellido: unApellido.! !
!Persona class categoriesFor: #crearPersonaNombre:apellido:!public! !

!Persona class categoriesFor: #crearPersonaNombre:apellido:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Reserva
	instanceVariableNames: 'fechaInicio fechaFin estadoReserva cantidadHuesped numeroHabitacion numeroReserva numeroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!
Reserva comment: ''!

Reserva comment:
''!
!Reserva categoriesForClass!Kernel-Objects! !
!Reserva methodsFor!
cantHuesped
	^cantidadHuesped.! !
!Reserva categoriesFor: #cantHuesped!public! !

!Reserva methodsFor!
initReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
fechaInicio := unaFechaIni.
fechaFin := unaFechaFin.
estadoReserva := true.
cantidadHuesped := unaCant.
numeroReserva := unNroRes.
numeroHabitacion := unNroHab.
numeroCliente := unNroCliente.! !
!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva methodsFor!
modiEstadoReserva:unEstado
estadoReserva := unEstado.! !
!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva methodsFor!
modiFechaFin:unaFecha
fechaFin := unaFecha.! !
!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva methodsFor!
modiFechaInicio:unaFecha 
fechaInicio := unaFecha.! !
!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva methodsFor!
modiNumeroHabitacion:unNro
numeroHabitacion := unNro.! !
!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva methodsFor!
verEstadoReserva
	^estadoReserva! !
!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva methodsFor!
verFechaFin
	^fechaFin! !
!Reserva categoriesFor: #verFechaFin!public! !

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!public! !

!Reserva methodsFor!
verNumeroCliente
	^numeroCliente.! !
!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva methodsFor!
verNumeroHabitacion
	^numeroHabitacion! !
!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva methodsFor!
verNumeroReserva
	^numeroReserva.! !
!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva categoriesFor: #cantHuesped!public! !

!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva categoriesFor: #verFechaFin!private! !

!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva class methodsFor!
crearReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
^(self new) initReservaIni: unaFechaIni Fin: unaFechaFin cantHuesp: unaCant numHab: unNroHab nroRes: unNroRes nroCliente: unNroCliente.! !
!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!

Reserva removeSelector: #verFechaInicio ifAbsent: []!

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!private! !

Reserva removeSelector: #verFechaInicio ifAbsent: []!

!Reserva categoriesFor: #verFechaFin!public! !

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!public! !

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Cliente
	instanceVariableNames: 'direccion correo telefono'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Cliente guid: (GUID fromString: '{f531c219-86da-44eb-8723-ccef5a420a6d}')!

Cliente guid: (GUID fromString: '{F531C219-86DA-44EB-8723-CCEF5A420A6D}')!
Cliente comment: ''!

Cliente comment:
''!
!Cliente categoriesForClass!Kernel-Objects! !
!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente methodsFor!
verCorreo
	^correo.! !
!Cliente categoriesFor: #verCorreo!public! !

!Cliente methodsFor!
verDireccion
	^direccion.! !
!Cliente categoriesFor: #verDireccion!public! !

!Cliente methodsFor!
verTelefono
	^telefono.! !
!Cliente categoriesFor: #verTelefono!public! !

!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:!public! !

!Cliente categoriesFor: #verCorreo!public! !

!Cliente categoriesFor: #verDireccion!public! !

!Cliente categoriesFor: #verTelefono!public! !

!Cliente class methodsFor!
crearClienteNombre: unNombre apellido: unApellido direccion:unaDireccion telefono: unTelefono correo: unCorreo
^(self new) initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido.! !
!Cliente class categoriesFor: #crearClienteNombre:apellido:direccion:telefono:correo:!public! !

!Cliente class categoriesFor: #crearClienteNombre:apellido:direccion:telefono:correo:!public! !

!

!Habitacion class methodsFor!
crearHabitacionnroHab: unNum tipo: unTipo precioPorNoche: unPrecioPorNoche
^(self new) initHabitacionnro: unNum tipo: unTipo precioPorNoche: unPrecioPorNoche! !
!Habitacion class categoriesFor: #crearHabitacionnroHab:tipo:precioPorNoche:!public! !

!

!Habitacion methodsFor!
Habitacion! !
!Habitacion categoriesFor: #Habitacion!public! !

Habitacion removeSelector: #Habitacion ifAbsent: []!

"19:15:50, sábado, 19 de octubre de 2024: Image saved"!

| hotel cliente habitacion reserva factura |

hotel := Hotel new.
hotel nombre: 'Hotel Paraiso'.
hotel direccion: 'Av. Central 123'.
hotel calificacion: 5.
hotel telefono: '123-456-789'.

habitacion := Habitacion new.
habitacion nroHab: 101.
habitacion tipo: 'Doble'.
habitacion estado: 'Disponible'.
habitacion precioPorNoche: 100.

hotel agregarHabitacion: habitacion.

cliente := Cliente new.
cliente nombre: 'Juan'.
cliente apellido: 'Pérez'.
cliente direccion: 'Calle Falsa 123'.
cliente correo: 'juan.perez@email.com'.
cliente telefono: '123456789'.

reserva := Reserva new.
reserva fechaInicio: (Date today).
reserva fechaFin: (Date today addDays: 3).
reserva cantidadHuespedes: 2.
reserva nroHabitacion: habitacion nroHab.
reserva numeroCliente: cliente.

hotel agregarReserva: reserva.

factura := Factura new.
factura montoTotal: (habitacion precioPorNoche * 3).
factura nroReserva: reserva numeroReserva.
factura estadoPago: 'Pendiente'.

Transcript show: 'Reserva creada para: ', cliente nombre, ' ', cliente apellido; cr.
Transcript show: 'Hotel: ', hotel nombre; cr.
Transcript show: 'Habitación: ', habitacion nroHab, ' Tipo: ', habitacion tipo; cr.
Transcript show: 'Monto total de la factura: ', factura montoTotal asString; cr.
!

Persona subclass: #Cliente
	instanceVariableNames: 'direccion correo telefono nroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cliente methodsFor!
verNroCliente
	^nroCliente .! !
!Cliente categoriesFor: #verNroCliente!public! !

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios clientes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
clientes:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
existeCliente:unCliente
^ clientes include: unCliente .! !
!Hotel categoriesFor: #existeCliente:!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaClientes
^ clientes empty.! !
!Hotel categoriesFor: #esVaciaClientes!public! !

!Hotel methodsFor!
eliminarCliente:unCliente
clientes remove: unCliente .! !
!Hotel categoriesFor: #eliminarCliente:!public! !

!Hotel methodsFor!
recuperarCliente: Pos
^ clientes at: Pos.! !
!Hotel categoriesFor: #recuperarCliente:!public! !

!Hotel methodsFor!
todosLosClientes
^ clientes .! !
!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel methodsFor!
todosLosClientes
^ clientes.! !
!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel methodsFor!
cantidadClientes
^ clientes size.! !
!Hotel categoriesFor: #cantidadClientes!public! !

!Hotel methodsFor!
agregarCliente:unCliente
clientes add: unCliente .! !
!Hotel categoriesFor: #agregarCliente:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes select: [:Cliente | Cliente VerNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes select: [:Cliente | Cliente VerNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes detect: [:Cliente | Cliente VerNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes detect: [:cliente | cliente VerNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes detect: [:cliente | cliente verNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes detect: [:cliente | cliente verNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido nroCliente: unNum
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:nroCliente:!public! !

!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido nroCliente: unNum
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.
	nroCliente:= unNum.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:nroCliente:!public! !

Cliente removeSelector: #initClientDireccion:correo:telefono:nombre:apellido: ifAbsent: []!

!Cliente class methodsFor!
crearClienteNombre: unNombre apellido: unApellido direccion:unaDireccion telefono: unTelefono correo: unCorreo nroCliente: unNum
^(self new) initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido nroCliente: unNum.! !
!Cliente class categoriesFor: #crearClienteNombre:apellido:direccion:telefono:correo:nroCliente:!public! !

Cliente class removeSelector: #crearClienteNombre:apellido:direccion:telefono:correo: ifAbsent: []!

!Hotel methodsFor!
buscarHabitacionPorNro:UnNro
^ habitaciones detect: [:habitacion | habitacion verNro = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionPorNro:!public! !

!Hotel methodsFor!
buscarHabitacionPorNro:UnNro
^ habitaciones detect: [:habitacion | habitacion verNroHab = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionPorNro:!public! !

!Hotel methodsFor!
buscarHabitacionPorNro:UnNro
^ habitaciones detect: [:habitacion | habitacion verNroHab = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionPorNro:!public! !

!Hotel methodsFor!
buscarClientePorNro:UnNro
^ clientes detect: [:cliente | cliente verNroCliente = UnNro] ifNone: [nil].! !
!Hotel categoriesFor: #buscarClientePorNro:!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel.! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
buscarHabitacionDisponible
^ habitaciones detect: [:habitacion | habitacion verNroHab = true ] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionDisponible!public! !

!Hotel methodsFor!
buscarHabitacionDisponible: unTipo
^ habitaciones detect: [:habitacion | (habitacion verEstado = true and: [habitacion verTipo = unTipo])] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionDisponible:!public! !

!Hotel methodsFor!
buscarHabitacionDisponible: unTipo
^ habitaciones detect: [:habitacion | (habitacion verEstado = true and: [habitacion verTipo = unTipo])] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionDisponible:!public! !

!Hotel methodsFor!
buscarHabitacionDisponible: unTipo
^ habitaciones detect: [:habitacion | (habitacion verEstado = true and: [habitacion verTipo = unTipo])] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionDisponible:!public! !

Hotel removeSelector: #buscarHabitacionDisponible ifAbsent: []!

"18:03:52, domingo, 20 de octubre de 2024: Dolphin Smalltalk Professional started"!

Persona subclass: #Cliente
	instanceVariableNames: 'direccion correo telefono nroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Cliente methodsFor!
verNroCliente
	^nroCliente .! !
!Cliente categoriesFor: #verNroCliente!public! !

!Cliente methodsFor!
initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido nroCliente: unNum
	super initPersonaNombre: unNombre apellido: unApellido.
	direccion := unaDireccion.
	correo := unCorreo.
	telefono := unTelefono.
	nroCliente := unNum.! !
!Cliente categoriesFor: #initClientDireccion:correo:telefono:nombre:apellido:nroCliente:!public! !

Cliente removeSelector: #initClientDireccion:correo:telefono:nombre:apellido: ifAbsent: []!

!Cliente class methodsFor!
crearClienteNombre: unNombre apellido: unApellido direccion:unaDireccion telefono: unTelefono correo: unCorreo nroCliente: unNum
^(self new) initClientDireccion: unaDireccion correo: unCorreo telefono: unTelefono nombre: unNombre apellido: unApellido nroCliente: unNum.! !
!Cliente class categoriesFor: #crearClienteNombre:apellido:direccion:telefono:correo:nroCliente:!public! !

Cliente class removeSelector: #crearClienteNombre:apellido:direccion:telefono:correo: ifAbsent: []!

"18:07:15, domingo, 20 de octubre de 2024: Image saved"!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios clientes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios clientes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

!Hotel methodsFor!
agregarCliente:unClient
clientes add: unClient .! !
!Hotel categoriesFor: #agregarCliente:!public! !

!Hotel methodsFor!
cantidadClientes
^ clientes size.! !
!Hotel categoriesFor: #cantidadClientes!public! !

!Hotel methodsFor!
eliminarCliente:unClient
clientes remove: unClient .! !
!Hotel categoriesFor: #eliminarCliente:!public! !

!Hotel methodsFor!
esVaciaClientes
^ clientes empty.! !
!Hotel categoriesFor: #esVaciaClientes!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas include: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas includes: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas includes: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones includes: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios includes: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
existeCliente:unClient
^ clientes includes: unClient .! !
!Hotel categoriesFor: #existeCliente:!public! !

!Hotel methodsFor!
recuperarCliente: Pos
^ clientes at: Pos.! !
!Hotel categoriesFor: #recuperarCliente:!public! !

!Hotel methodsFor!
todosLosClientes
^ clientes .! !
!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
clientes:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
buscarHabitacionDisponibleTipo: unTipo
    ^ habitaciones detect: [:hab | (hab verEstado = true and: [hab tipo = unTipo])] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

!Hotel methodsFor!
buscarHabitacionDisponibleTipo: unTipo
    ^ habitaciones detect: [:hab | (hab verEstado = true and: [hab verTipo = unTipo])] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

!Hotel methodsFor!
buscarHabitacionDisponibleTipo: unTipo
    ^ habitaciones detect: [:hab | (hab verEstado = true and: [hab verTipo = unTipo])] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

"18:15:03, domingo, 20 de octubre de 2024: Image saved"!

!Hotel methodsFor!
buscarCliente: unNum

! !
!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel methodsFor!
buscarCliente: unNum
 ^ clientes detect: [:client |  client verNroCliente = unNum ] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel methodsFor!
buscarCliente: unNum
 ^ clientes detect: [:client |  client verNroCliente = unNum ] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel methodsFor!
buscarCliente: unNum
 ^ clientes detect: [:client |  client verNroCliente = unNum ] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel methodsFor!
buscarCliente: unNum
 ^ clientes detect: [:client |  client verNroCliente = unNum ] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarCliente:!public! !

| hotel c h  reserva factura nroCliente  cliente|
!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.!

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel.! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.!

h := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.!

hotel agregarHabitacion: h.!

hotel agregarHabitacion: h.!

h := Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: h.!

h := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: h.!

"18:30:54, domingo, 20 de octubre de 2024: Image saved"!

| hotel c h  reserva factura nroCliente  cliente|!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.!


h := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: h.
!


"Creacion  Clientes"
c := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: c.!

nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.!

cliente:= hotel buscarCliente: nroCliente.
cliente inspect.!

!

| hotel c h  reserva factura nroCliente  cliente ini fin cant  tipoHab hab res cl nroHab|

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Creacion Habitaciones"
h := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: h.

"Creacion  Clientes"
c := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: c.

"Eligiendo un cliente para crear la reserva"

nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
cliente:= hotel buscarCliente: nroCliente.
cliente inspect.

"Creacion reserva"

(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

"Se busca si hay alguna abitacion disponible"

hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
nroHab := hab verNroHab.
res := Prompter prompt: 'Ingrese el numero de reserva'.
cl := cliente verNroCliente.

"Creo la reserva"

reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
reserva inspect.

Transcript show: 'Se registro la reserva correctamente' ]
ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
MessageBox warning: ' No hay ninguna habitacion disponible'.]
] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
MessageBox warning: 'El cliente no se encuentra registrado'.]!

"19:11:08, domingo, 20 de octubre de 2024: Image saved"!

"19:15:13, domingo, 20 de octubre de 2024: Image saved"!

"19:22:31, viernes, 25 de octubre de 2024: Dolphin Smalltalk Professional started"!

"19:24:25, viernes, 25 de octubre de 2024: Dolphin Smalltalk Professional started"!

| hotel c h  reserva factura nroCliente  cliente ini fin cant  tipoHab hab res cl nroHab|

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Creacion Habitaciones"
h := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: h.

"Creacion  Clientes"
c := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: c.

"Eligiendo un cliente para crear la reserva"

nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
cliente:= hotel buscarCliente: nroCliente.
cliente inspect.

"Creacion reserva"

(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

"Se busca si hay alguna habitacion disponible"

hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
nroHab := hab verNroHab.
res := Prompter prompt: 'Ingrese el numero de reserva'.
cl := cliente verNroCliente.

"Creo la reserva"

reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
reserva inspect.

Transcript show: 'Se registro la reserva correctamente' ]
ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
MessageBox warning: ' No hay ninguna habitacion disponible'.]
] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
MessageBox warning: 'El cliente no se encuentra registrado'.]!

| hotel c h  reserva factura nroCliente  cliente ini fin cant  tipoHab hab res cl nroHab|

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Creacion Habitaciones"
h := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: h.

"Creacion  Clientes"
c := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: c.

"Eligiendo un cliente para crear la reserva"

nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
cliente:= hotel buscarCliente: nroCliente.
cliente inspect.

"Creacion reserva"

(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

"Se busca si hay alguna habitacion disponible"

hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
nroHab := hab verNroHab.
res := Prompter prompt: 'Ingrese el numero de reserva'.
cl := cliente verNroCliente.

"Creo la reserva"

reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
reserva inspect.

Transcript show: 'Se registro la reserva correctamente' ]
ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
MessageBox warning: ' No hay ninguna habitacion disponible'.]
] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
MessageBox warning: 'El cliente no se encuentra registrado'.]!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.!

Transcript clear;
show: 'Hotel';
show: Hotel verNombre printString;
cr.!

Transcript clear;
show: 'Hotel';
show: Hotel verNombre printString;
cr.!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: 'Hotel';
show: hotel verNombre printString;
cr.!

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: 'Hotel';
show: hotel verNombre printString;
cr.!

Transcript clear;
show: 'Hotel';
show: hotel verNombre printString;
cr.!


hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: 'Hotel';
show: hotel verNombre printString;
cr.!

Transcript clear;
show: 'Hotel'; show: hotel verNombre printString; cr.!

| hotel c h  reserva factura nroCliente  cliente ini fin cant  tipoHab hab res cl nroHab|

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear; show: 'Hotel'; show: hotel verNombre printString; cr.!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear; show: 'Hotel'; show: hotel verNombre printString; cr.!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear; show: 'Hotel'; show: hotel verNombre printString; cr.!


Transcript clear.
Transcript show: 'Hotel'; show: hotel verNombre printString; cr.!

Transcript clear; show: 'Hotel'; show: hotel verNombre printString; cr.!

Transcript clear; show: 'Hotel: '; 
show: hotel verNombre printString; cr.!

Transcript clear; show: 'Hotel: '; 
show: hotel verNombre printString; cr.!

"19:36:55, viernes, 25 de octubre de 2024: Dolphin Smalltalk Professional started"!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear; show: 'Hotel: '; show: hotel verNombre printString; cr.!

Transcript clear; show: 'Hotel: '; show: hotel verNombre printString; cr.!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '***************************************************************************************************' ;
cr;
show: '*********************** Hotel ',  hotel verNombre printString , '  ****************************************************';
cr;
show: '***************************************************************************************************';
cr.!

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '***********************************************************************************************************************************************************************************************************' ;
cr;
show: '***************************************************************************** Hotel ',  hotel verNombre printString , ' ******************************************************************************';
cr;
show: '***********************************************************************************************************************************************************************************************************';
cr.

!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '***********************************************************************************************************************************************************************************************************' ;
cr;
show: '***************************************************************************** Hotel ',  hotel verNombre printString , ' *****************************************************************************************';
cr;
show: '***********************************************************************************************************************************************************************************************************';
cr.

!

hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '***************************************************************************** Hotel ',  hotel verNombre printString , ' *****************************************************************************************';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '---------------------------------------------------------------------------------------------------- Hotel ',  hotel verNombre printString , '---------------------------------------------------------------------------------------------------- ';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '------------------------------------------------------------------------------------------ Hotel ',  hotel verNombre printString , '------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '---------------------------------------------------------------------------------------------- Hotel ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Hotel ',  hotel verNombre printString , '---------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
!


Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Hotel ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Hotel ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.


Transcript show: 'Menu: ';
cr;
show: 'Seleccione una opcion: '
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '1. Cargar nuevas habitaciones en el hotel.';
cr;
show: '2. Cargar nuevos clientes en el hotel.';
cr;
show: '3. Realizar una nueva reserva.';
cr;
show: '4. Ver las reservas por dia.';
cr;
show: '5. Ver habitaciones ocupadas.';
cr;
show: '6. Ver todas las habitaciones.';
cr;
show: '7. Ver todos los clientes.';
cr;
show: '8. Salir.';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr.!

Transcript show: 'Menu: ';
cr;
show: 'Seleccione una opcion: '
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '1. Cargar nuevas habitaciones en el hotel.';
cr;
show: '2. Cargar nuevos clientes en el hotel.';
cr;
show: '3. Realizar una nueva reserva.';
cr;
show: '4. Ver las reservas por dia.';
cr;
show: '5. Ver habitaciones ocupadas.';
cr;
show: '6. Ver todas las habitaciones.';
cr;
show: '7. Ver todos los clientes.';
cr;
show: '8. Salir.';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr.
!

Transcript show: 'Menu: '; cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las reservas por dia.'; cr.
Transcript show: '5. Ver habitaciones ocupadas.'; cr.
Transcript show: '6. Ver todas las habitaciones.'; cr.
Transcript show: '7. Ver todos los clientes.'; cr.
Transcript show: '8. Salir.'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Hotel ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.!

Transcript show: 'Menu: '; cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las reservas por dia.'; cr.
Transcript show: '5. Ver habitaciones ocupadas.'; cr.
Transcript show: '6. Ver todas las habitaciones.'; cr.
Transcript show: '7. Ver todos los clientes.'; cr.
Transcript show: '8. Salir.'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
!


Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las reservas por dia.'; cr.
Transcript show: '5. Ver habitaciones ocupadas.'; cr.
Transcript show: '6. Ver todas las habitaciones.'; cr.
Transcript show: '7. Ver todos los clientes.'; cr.
Transcript show: '8. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion:  ') asNumber.!

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las reservas por dia.'; cr.
Transcript show: '5. Ver habitaciones ocupadas.'; cr.
Transcript show: '6. Ver todas las habitaciones.'; cr.
Transcript show: '7. Ver todos los clientes.'; cr.
Transcript show: '8. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion:  ') asNumber.!

					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.!


Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.!


op:= (Prompter prompt: ' Ingrese una opcion u "8" para salir del sistema:  ') asNumber.!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion u "8" para salir del sistema:  ') asNumber.
[op ~= 8] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].
	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					
	]]!

| hotel c h  reserva factura nroCliente  cliente ini fin cant  tipoHab hab res cl nroHab|

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Creacion Habitaciones"
h := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: h.
h := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: h.

"Creacion  Clientes"
c := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: c.
c := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: c.

"Eligiendo un cliente para crear la reserva"

nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
cliente:= hotel buscarCliente: nroCliente.
cliente inspect.

"Creacion reserva"

(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

"Se busca si hay alguna habitacion disponible"

hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
nroHab := hab verNroHab.
res := Prompter prompt: 'Ingrese el numero de reserva'.
cl := cliente verNroCliente.

"Creo la reserva"

reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
reserva inspect.

Transcript show: 'Se registro la reserva correctamente' ]
ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
MessageBox warning: ' No hay ninguna habitacion disponible'.]
] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
MessageBox warning: 'El cliente no se encuentra registrado'.]!

"23:09:58, viernes, 25 de octubre de 2024: Image saved"!

"16:12:40, sábado, 26 de octubre de 2024: Dolphin Smalltalk Professional started"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].
	].
					
					
					
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].
	].
					
					
					
!

"18:11:43, sábado, 26 de octubre de 2024: Image saved"!

"18:11:49, sábado, 26 de octubre de 2024: Dolphin Smalltalk Professional started"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
				!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].
	].
					
					
					
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .
				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
				!

| hotel op hab nroHab tip prec nroClient c n a d t em  cliente cl res tipoHab cant fin ini nroCliente reserva tipSel habTip habOp|

"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].
	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].
	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
					
!

					
				!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	(op = 6) ifTrue: [
				diccionario := Dictionary new.
				
].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.]
						
				
].

	(op = 8) ifTrue: [

].
	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	(op = 6) ifTrue: [
				diccionario := Dictionary new.
				
].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr. ]].

	(op = 8) ifTrue: [

].
	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
					!


Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [Transcript  show: 'Hay una habitacion disponible en el hotel'.
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	(op = 6) ifTrue: [
				diccionario := Dictionary new.
				
].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr. ]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
		!

"21:54:04, sábado, 26 de octubre de 2024: Image saved"!

"17:01:43, domingo, 27 de octubre de 2024: Dolphin Smalltalk Professional started"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr. ].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript cr.
					key printOn: Transcript.
					Transcript nextPutAll: ' está asociada con: '; cr.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr. ]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	].
					
					
				!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr. ]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.
	].
					
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr. ]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.
	].
					
					
	!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"

	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"

	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.




Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
				!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.




Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.





"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"
"
habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.
"




"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"
"
habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.
"




"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
		!

"19:20:53, domingo, 27 de octubre de 2024: Image saved"!

"17:51:55, martes, 29 de octubre de 2024: Dolphin Smalltalk Professional started"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"
"
habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.
"




"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.





"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
				!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"
"
habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.
"




"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
				!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.





"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					
!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.





"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					
!

"19:11:56, viernes, 1 de noviembre de 2024: Dolphin Smalltalk Professional started"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.





"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Salir del programa'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema:  ') asNumber.
[op ~= 9] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 9 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					!

"18:38:21, domingo, 3 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"15:53:15, martes, 5 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"16:35:20, martes, 5 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"22:27:42, viernes, 8 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"22:48:18, viernes, 8 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"19:33:03, sábado, 9 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios clientes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!
Hotel comment: ''!

Hotel comment:
''!
!Hotel methodsFor!
agregarArea:unaArea
areas add: unaArea.! !
!Hotel categoriesFor: #agregarArea:!public! !

!Hotel methodsFor!
agregarCliente:unClient
clientes add: unClient .! !
!Hotel categoriesFor: #agregarCliente:!public! !

!Hotel methodsFor!
agregarHabitacion:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarServicio:unServ
servicios add: unServ.! !
!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel methodsFor!
buscarCliente: unNum
 ^ clientes detect: [:client |  client verNroCliente = unNum ] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel methodsFor!
buscarHabitacionDisponibleTipo: unTipo
    ^ habitaciones detect: [:hab | (hab verEstado = true and: [hab verTipo = unTipo])] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

!Hotel methodsFor!
buscarHabitacionPorNumero: unNum
^ habitaciones detect: [:hab | hab verNroHab = unNum] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionPorNumero:!public! !

!Hotel methodsFor!
cantidadAreas
^ areas size.! !
!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel methodsFor!
cantidadClientes
^ clientes size.! !
!Hotel categoriesFor: #cantidadClientes!public! !

!Hotel methodsFor!
cantidadHabitaciones
^ habitaciones size.! !
!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadServicios
^ servicios size.! !
!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel methodsFor!
eliminarArea:unaArea
areas remove: unaArea.! !
!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel methodsFor!
eliminarCliente:unClient
clientes remove: unClient .! !
!Hotel categoriesFor: #eliminarCliente:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarReserva:unaRes
reservas remove: unaRes .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarServicio:unServ
servicios remove: unServ.! !
!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaClientes
^ clientes empty.! !
!Hotel categoriesFor: #esVaciaClientes!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas includes: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeCliente:unClient
^ clientes includes: unClient .! !
!Hotel categoriesFor: #existeCliente:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones includes: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas includes: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios includes: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
clientes:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
modiCal:unaCal
calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
modiDir:unaDir
direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiNom:unNom
nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiTel:unTel
telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarCliente: Pos
^ clientes at: Pos.! !
!Hotel categoriesFor: #recuperarCliente:!public! !

!Hotel methodsFor!
recuperarHabitacion: Pos
^ habitaciones at: Pos.! !
!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel methodsFor!
recuperarReserva: Pos
^ reservas at: Pos.! !
!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel methodsFor!
recuperarServicio: Pos
^ servicios at: Pos.! !
!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel methodsFor!
reservasVigentes
|fechaActual col|
fechaActual := Date today.
col := self todasLasReservas.

^col select: [:reserva | reserva esVigente: fechaActual ]. 
! !
!Hotel categoriesFor: #reservasVigentes!public! !

!Hotel methodsFor!
todasLasAreas
^ areas.! !
!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel methodsFor!
todasLasHabitaciones
^ habitaciones.! !
!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel methodsFor!
todasLasReservas
^ reservas .! !
!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel methodsFor!
todosLosClientes
^ clientes .! !
!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel methodsFor!
todosLosServicios
^ servicios.! !
!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel methodsFor!
verCalificacion
^calificacion.! !
!Hotel categoriesFor: #verCalificacion!public! !

!Hotel methodsFor!
verDireccion
^direccion.! !
!Hotel categoriesFor: #verDireccion!public! !

!Hotel methodsFor!
verHabitacionesPorTipo: unTipo
| listaHabitaciones |
listaHabitaciones := self todasLasHabitaciones.
^ listaHabitaciones detect: [:habitacion | habitacion verTipo = unTipo] ifNone: [nil].


	! !
!Hotel categoriesFor: #verHabitacionesPorTipo:!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verTelefono
^telefono.
! !
!Hotel categoriesFor: #verTelefono!public! !

!Hotel categoriesFor: #agregarArea:!public! !

!Hotel categoriesFor: #agregarCliente:!public! !

!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

!Hotel categoriesFor: #buscarHabitacionPorNumero:!public! !

!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel categoriesFor: #cantidadClientes!public! !

!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel categoriesFor: #eliminarCliente:!public! !

!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel categoriesFor: #esVaciaClientes!public! !

!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel categoriesFor: #existeArea:!public! !

!Hotel categoriesFor: #existeCliente:!public! !

!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel categoriesFor: #existeReserva:!public! !

!Hotel categoriesFor: #existeServicio:!public! !

!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel categoriesFor: #modiCal:!public! !

!Hotel categoriesFor: #modiDir:!public! !

!Hotel categoriesFor: #modiNom:!public! !

!Hotel categoriesFor: #modiTel:!public! !

!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel categoriesFor: #recuperarCliente:!public! !

!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel categoriesFor: #reservasVigentes!public! !

!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel categoriesFor: #verCalificacion!public! !

!Hotel categoriesFor: #verDireccion!public! !

!Hotel categoriesFor: #verHabitacionesPorTipo:!public! !

!Hotel categoriesFor: #verNombre!public! !

!Hotel categoriesFor: #verTelefono!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel.! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Reserva
	instanceVariableNames: 'fechaInicio fechaFin estadoReserva cantidadHuesped numeroHabitacion numeroReserva numeroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!
Reserva comment: ''!

Reserva comment:
''!
!Reserva methodsFor!
cantHuesped
	^cantidadHuesped.! !
!Reserva categoriesFor: #cantHuesped!public! !

!Reserva methodsFor!
esVigente: unaFecha
^(fechaInicio <= unaFecha) and: [fechaFin >= unaFecha ].! !
!Reserva categoriesFor: #esVigente:!public! !

!Reserva methodsFor!
initReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
fechaInicio := Date fromString: unaFechaIni format: 'dd-mm-yyyy'.
fechaFin := Date fromString: unaFechaFin format: 'dd-mm-yyyy'.
estadoReserva := true.
cantidadHuesped := unaCant.
numeroReserva := unNroRes.
numeroHabitacion := unNroHab.
numeroCliente := unNroCliente.
! !
!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva methodsFor!
modiEstadoReserva:unEstado
estadoReserva := unEstado.! !
!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva methodsFor!
modiFechaFin:unaFecha
fechaFin := unaFecha.! !
!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva methodsFor!
modiFechaInicio:unaFecha 
fechaInicio := unaFecha.! !
!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva methodsFor!
modiNumeroHabitacion:unNro
numeroHabitacion := unNro.! !
!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva methodsFor!
verEstadoReserva
	^estadoReserva! !
!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva methodsFor!
verFechaFin
	^fechaFin! !
!Reserva categoriesFor: #verFechaFin!public! !

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!public! !

!Reserva methodsFor!
verNumeroCliente
	^numeroCliente.! !
!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva methodsFor!
verNumeroHabitacion
	^numeroHabitacion! !
!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva methodsFor!
verNumeroReserva
	^numeroReserva.! !
!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva categoriesFor: #cantHuesped!public! !

!Reserva categoriesFor: #esVigente:!public! !

!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva categoriesFor: #verFechaFin!private! !

!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva class methodsFor!
crearReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
^(self new) initReservaIni: unaFechaIni Fin: unaFechaFin cantHuesp: unaCant numHab: unNroHab nroRes: unNroRes nroCliente: unNroCliente.! !
!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!

"15:13:37, miércoles, 13 de noviembre de 2024: Dolphin Smalltalk Professional started"!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Hotel
	instanceVariableNames: 'nombre direccion calificacion telefono areas reservas habitaciones servicios clientes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!

Hotel guid: (GUID fromString: '{AA75BA27-7BC4-458D-96A2-6F7B348EDA01}')!
Hotel comment: ''!

Hotel comment:
''!
!Hotel methodsFor!
agregarArea:unaArea
areas add: unaArea.! !
!Hotel categoriesFor: #agregarArea:!public! !

!Hotel methodsFor!
agregarCliente:unClient
clientes add: unClient .! !
!Hotel categoriesFor: #agregarCliente:!public! !

!Hotel methodsFor!
agregarHabitacion:unaHab
habitaciones add: unaHab.! !
!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel methodsFor!
agregarReserva:unaRes
reservas add: unaRes.! !
!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel methodsFor!
agregarServicio:unServ
servicios add: unServ.! !
!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel methodsFor!
buscarCliente: unNum
 ^ clientes detect: [:client |  client verNroCliente = unNum ] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel methodsFor!
buscarHabitacionDisponibleTipo: unTipo
    ^ habitaciones detect: [:hab | (hab verEstado = true and: [hab verTipo = unTipo])] ifNone: [nil].
! !
!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

!Hotel methodsFor!
buscarHabitacionPorNumero: unNum
^ habitaciones detect: [:hab | hab verNroHab = unNum] ifNone: [nil].! !
!Hotel categoriesFor: #buscarHabitacionPorNumero:!public! !

!Hotel methodsFor!
cantidadAreas
^ areas size.! !
!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel methodsFor!
cantidadClientes
^ clientes size.! !
!Hotel categoriesFor: #cantidadClientes!public! !

!Hotel methodsFor!
cantidadHabitaciones
^ habitaciones size.! !
!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel methodsFor!
cantidadReservas
^ reservas size.! !
!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel methodsFor!
cantidadServicios
^ servicios size.! !
!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel methodsFor!
eliminarArea:unaArea
areas remove: unaArea.! !
!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel methodsFor!
eliminarCliente:unClient
clientes remove: unClient .! !
!Hotel categoriesFor: #eliminarCliente:!public! !

!Hotel methodsFor!
eliminarHabitacion:unaHab
habitaciones remove: unaHab.! !
!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel methodsFor!
eliminarReserva:unaRes
reservas remove: unaRes .! !
!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel methodsFor!
eliminarServicio:unServ
servicios remove: unServ.! !
!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel methodsFor!
esVaciaAreas
^ areas empty.! !
!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel methodsFor!
esVaciaClientes
^ clientes empty.! !
!Hotel categoriesFor: #esVaciaClientes!public! !

!Hotel methodsFor!
esVaciaHabitaciones
^ habitaciones empty.! !
!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel methodsFor!
esVaciaReservas
^ reservas empty.! !
!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel methodsFor!
esVaciaServicios
^ servicios empty.! !
!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel methodsFor!
existeArea:unaArea
^ areas includes: unaArea.! !
!Hotel categoriesFor: #existeArea:!public! !

!Hotel methodsFor!
existeCliente:unClient
^ clientes includes: unClient .! !
!Hotel categoriesFor: #existeCliente:!public! !

!Hotel methodsFor!
existeHabitacion:unaHab
^ habitaciones includes: unaHab .! !
!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel methodsFor!
existeReserva:unaRes
^ reservas includes: unaRes.! !
!Hotel categoriesFor: #existeReserva:!public! !

!Hotel methodsFor!
existeServicio:unServ
^ servicios includes: unServ .! !
!Hotel categoriesFor: #existeServicio:!public! !

!Hotel methodsFor!
initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
nombre:= unNom.
direccion:= unaDir.
calificacion:= unaCal.
telefono:= unTel.
areas:= OrderedCollection new. 
reservas:= OrderedCollection new.
habitaciones:= OrderedCollection new.
servicios:= OrderedCollection new.
clientes:= OrderedCollection new.
! !
!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel methodsFor!
modiCal:unaCal
calificacion:=unaCal.! !
!Hotel categoriesFor: #modiCal:!public! !

!Hotel methodsFor!
modiDir:unaDir
direccion :=unaDir.! !
!Hotel categoriesFor: #modiDir:!public! !

!Hotel methodsFor!
modiNom:unNom
nombre:=unNom.! !
!Hotel categoriesFor: #modiNom:!public! !

!Hotel methodsFor!
modiTel:unTel
telefono :=unTel.! !
!Hotel categoriesFor: #modiTel:!public! !

!Hotel methodsFor!
recuperarArea: Pos
^ areas at: Pos.! !
!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel methodsFor!
recuperarCliente: Pos
^ clientes at: Pos.! !
!Hotel categoriesFor: #recuperarCliente:!public! !

!Hotel methodsFor!
recuperarHabitacion: Pos
^ habitaciones at: Pos.! !
!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel methodsFor!
recuperarReserva: Pos
^ reservas at: Pos.! !
!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel methodsFor!
recuperarServicio: Pos
^ servicios at: Pos.! !
!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel methodsFor!
reservasVigentes
|fechaActual col|
fechaActual := Date today.
col := self todasLasReservas.

^col select: [:reserva | reserva esVigente: fechaActual ]. 
! !
!Hotel categoriesFor: #reservasVigentes!public! !

!Hotel methodsFor!
todasLasAreas
^ areas.! !
!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel methodsFor!
todasLasHabitaciones
^ habitaciones.! !
!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel methodsFor!
todasLasReservas
^ reservas .! !
!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel methodsFor!
todosLosClientes
^ clientes .! !
!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel methodsFor!
todosLosServicios
^ servicios.! !
!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel methodsFor!
verCalificacion
^calificacion.! !
!Hotel categoriesFor: #verCalificacion!public! !

!Hotel methodsFor!
verDireccion
^direccion.! !
!Hotel categoriesFor: #verDireccion!public! !

!Hotel methodsFor!
verHabitacionesPorTipo: unTipo
| listaHabitaciones |
listaHabitaciones := self todasLasHabitaciones.
^ listaHabitaciones detect: [:habitacion | habitacion verTipo = unTipo] ifNone: [nil].


	! !
!Hotel categoriesFor: #verHabitacionesPorTipo:!public! !

!Hotel methodsFor!
verNombre
^nombre.! !
!Hotel categoriesFor: #verNombre!public! !

!Hotel methodsFor!
verTelefono
^telefono.
! !
!Hotel categoriesFor: #verTelefono!public! !

!Hotel categoriesFor: #agregarArea:!public! !

!Hotel categoriesFor: #agregarCliente:!public! !

!Hotel categoriesFor: #agregarHabitacion:!public! !

!Hotel categoriesFor: #agregarReserva:!public! !

!Hotel categoriesFor: #agregarServicio:!public! !

!Hotel categoriesFor: #buscarCliente:!public! !

!Hotel categoriesFor: #buscarHabitacionDisponibleTipo:!public! !

!Hotel categoriesFor: #buscarHabitacionPorNumero:!public! !

!Hotel categoriesFor: #cantidadAreas!public! !

!Hotel categoriesFor: #cantidadClientes!public! !

!Hotel categoriesFor: #cantidadHabitaciones!public! !

!Hotel categoriesFor: #cantidadReservas!public! !

!Hotel categoriesFor: #cantidadServicios!public! !

!Hotel categoriesFor: #eliminarArea:!public! !

!Hotel categoriesFor: #eliminarCliente:!public! !

!Hotel categoriesFor: #eliminarHabitacion:!public! !

!Hotel categoriesFor: #eliminarReserva:!public! !

!Hotel categoriesFor: #eliminarServicio:!public! !

!Hotel categoriesFor: #esVaciaAreas!public! !

!Hotel categoriesFor: #esVaciaClientes!public! !

!Hotel categoriesFor: #esVaciaHabitaciones!public! !

!Hotel categoriesFor: #esVaciaReservas!public! !

!Hotel categoriesFor: #esVaciaServicios!public! !

!Hotel categoriesFor: #existeArea:!public! !

!Hotel categoriesFor: #existeCliente:!public! !

!Hotel categoriesFor: #existeHabitacion:!public! !

!Hotel categoriesFor: #existeReserva:!public! !

!Hotel categoriesFor: #existeServicio:!public! !

!Hotel categoriesFor: #initHotelnom:dir:cal:tel:!public! !

!Hotel categoriesFor: #modiCal:!public! !

!Hotel categoriesFor: #modiDir:!public! !

!Hotel categoriesFor: #modiNom:!public! !

!Hotel categoriesFor: #modiTel:!public! !

!Hotel categoriesFor: #recuperarArea:!public! !

!Hotel categoriesFor: #recuperarCliente:!public! !

!Hotel categoriesFor: #recuperarHabitacion:!public! !

!Hotel categoriesFor: #recuperarReserva:!public! !

!Hotel categoriesFor: #recuperarServicio:!public! !

!Hotel categoriesFor: #reservasVigentes!public! !

!Hotel categoriesFor: #todasLasAreas!public! !

!Hotel categoriesFor: #todasLasHabitaciones!public! !

!Hotel categoriesFor: #todasLasReservas!public! !

!Hotel categoriesFor: #todosLosClientes!public! !

!Hotel categoriesFor: #todosLosServicios!public! !

!Hotel categoriesFor: #verCalificacion!public! !

!Hotel categoriesFor: #verDireccion!public! !

!Hotel categoriesFor: #verHabitacionesPorTipo:!public! !

!Hotel categoriesFor: #verNombre!public! !

!Hotel categoriesFor: #verTelefono!public! !

!Hotel class methodsFor!
crearHotelnom:unNom dir:unaDir cal:unaCal tel:unTel
^(self new) initHotelnom:unNom dir:unaDir cal:unaCal tel:unTel.! !
!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!Hotel class categoriesFor: #crearHotelnom:dir:cal:tel:!public! !

!

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

Habitacion class methodsFor!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Factura
	instanceVariableNames: 'nroFactura montoTotal fechaEmision estadoPago nroReserva'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Factura guid: (GUID fromString: '{7E4CED10-5658-4EAF-9E4D-42A2C5A74E13}')!

Factura guid: (GUID fromString: '{7E4CED10-5658-4EAF-9E4D-42A2C5A74E13}')!
Factura comment: ''!

Factura comment:
''!
!Factura methodsFor!
initFacturanroFactura:numeroF montoTotal:monto fechaEmision:fecha estadoPago:estado nroReserva:numeroR
nroFactura:=numeroF.
montoTotal:=monto.
fechaEmision:=fecha.
estadoPago:=estado.
nroReserva:=numeroR.! !
!Factura categoriesFor: #initFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!Factura categoriesFor: #initFacturanroFactura:montoTotal:fechaEmision:estadoPago:nroReserva:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Reserva
	instanceVariableNames: 'fechaInicio fechaFin estadoReserva cantidadHuesped numeroHabitacion numeroReserva numeroCliente'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!

Reserva guid: (GUID fromString: '{FF4E76EB-4D88-49AF-BEA6-01B6A7560144}')!
Reserva comment: ''!

Reserva comment:
''!
!Reserva methodsFor!
cantHuesped
	^cantidadHuesped.! !
!Reserva categoriesFor: #cantHuesped!public! !

!Reserva methodsFor!
esVigente: unaFecha
^(fechaInicio <= unaFecha) and: [fechaFin >= unaFecha ].! !
!Reserva categoriesFor: #esVigente:!public! !

!Reserva methodsFor!
initReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
fechaInicio := Date fromString: unaFechaIni format: 'dd-mm-yyyy'.
fechaFin := Date fromString: unaFechaFin format: 'dd-mm-yyyy'.
estadoReserva := true.
cantidadHuesped := unaCant.
numeroReserva := unNroRes.
numeroHabitacion := unNroHab.
numeroCliente := unNroCliente.
! !
!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva methodsFor!
modiEstadoReserva:unEstado
estadoReserva := unEstado.! !
!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva methodsFor!
modiFechaFin:unaFecha
fechaFin := unaFecha.! !
!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva methodsFor!
modiFechaInicio:unaFecha 
fechaInicio := unaFecha.! !
!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva methodsFor!
modiNumeroHabitacion:unNro
numeroHabitacion := unNro.! !
!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva methodsFor!
verEstadoReserva
	^estadoReserva! !
!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva methodsFor!
verFechaFin
	^fechaFin! !
!Reserva categoriesFor: #verFechaFin!public! !

!Reserva methodsFor!
verFechaInicio
	^fechaInicio.! !
!Reserva categoriesFor: #verFechaInicio!public! !

!Reserva methodsFor!
verNumeroCliente
	^numeroCliente.! !
!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva methodsFor!
verNumeroHabitacion
	^numeroHabitacion! !
!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva methodsFor!
verNumeroReserva
	^numeroReserva.! !
!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva categoriesFor: #cantHuesped!public! !

!Reserva categoriesFor: #esVigente:!public! !

!Reserva categoriesFor: #initReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva categoriesFor: #modiEstadoReserva:!public! !

!Reserva categoriesFor: #modiFechaFin:!public! !

!Reserva categoriesFor: #modiFechaInicio:!public! !

!Reserva categoriesFor: #modiNumeroHabitacion:!public! !

!Reserva categoriesFor: #verEstadoReserva!public! !

!Reserva categoriesFor: #verFechaFin!private! !

!Reserva categoriesFor: #verFechaInicio!private! !

!Reserva categoriesFor: #verNumeroCliente!public! !

!Reserva categoriesFor: #verNumeroHabitacion!public! !

!Reserva categoriesFor: #verNumeroReserva!public! !

!Reserva class methodsFor!
crearReservaIni:unaFechaIni Fin:unaFechaFin cantHuesp:unaCant numHab:unNroHab nroRes:unNroRes nroCliente:unNroCliente
^(self new) initReservaIni: unaFechaIni Fin: unaFechaFin cantHuesp: unaCant numHab: unNroHab nroRes: unNroRes nroCliente: unNroCliente.! !
!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!Reserva class categoriesFor: #crearReservaIni:Fin:cantHuesp:numHab:nroRes:nroCliente:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Servicio
	instanceVariableNames: 'tipo costo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Servicio guid: (GUID fromString: '{02a47aa4-7a90-4a12-80a0-ba023bbdca54}')!

Servicio guid: (GUID fromString: '{02A47AA4-7A90-4A12-80A0-BA023BBDCA54}')!
Servicio comment: ''!

Servicio comment:
''!
!Servicio categoriesForClass!Kernel-Objects! !
!Servicio methodsFor!
initServicioTipo:unTipo costo:unCosto
tipo:=unTipo.
costo:=unCosto.! !
!Servicio categoriesFor: #initServicioTipo:costo:!public! !

!Servicio methodsFor!
modiCosto:unCosto
costo:=unCosto.! !
!Servicio categoriesFor: #modiCosto:!public! !

!Servicio methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Servicio categoriesFor: #modiTipo:!public! !

!Servicio methodsFor!
verCosto
^costo.! !
!Servicio categoriesFor: #verCosto!public! !

!Servicio methodsFor!
verTipo
^tipo.! !
!Servicio categoriesFor: #verTipo!public! !

!Servicio categoriesFor: #initServicioTipo:costo:!public! !

!Servicio categoriesFor: #modiCosto:!public! !

!Servicio categoriesFor: #modiTipo:!public! !

!Servicio categoriesFor: #verCosto!public! !

!Servicio categoriesFor: #verTipo!public! !

!Servicio class methodsFor!
createServicioTipo:unTipo costo:unCosto
^(self new)initServicioTipo: unTipo costo: unCosto.! !
!Servicio class categoriesFor: #createServicioTipo:costo:!public! !

!Servicio class categoriesFor: #createServicioTipo:costo:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Persona subclass: #Empleado
	instanceVariableNames: 'salario antiguedad'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Empleado guid: (GUID fromString: '{ddd16055-9580-4308-a91f-f6d8b4dca4e0}')!

Empleado guid: (GUID fromString: '{DDD16055-9580-4308-A91F-F6D8B4DCA4E0}')!
Empleado comment: ''!

Empleado comment:
''!
!Empleado categoriesForClass!Kernel-Objects! !
!Empleado methodsFor!
initEmpleadoSalario:unSalario antiguedad:suAntiguedad nombre:unNombre apellido:unApellido
super initPersonaNombre: unNombre apellido: unApellido.
salario:=unSalario.
antiguedad:=suAntiguedad.! !
!Empleado categoriesFor: #initEmpleadoSalario:antiguedad:nombre:apellido:!public! !

!Empleado methodsFor!
modiAntiguedad:suAntiguedad
antiguedad:=suAntiguedad.! !
!Empleado categoriesFor: #modiAntiguedad:!public! !

!Empleado methodsFor!
verAntiguedad
^antiguedad.! !
!Empleado categoriesFor: #verAntiguedad!public! !

!Empleado methodsFor!
verSalario
^salario.! !
!Empleado categoriesFor: #verSalario!public! !

!Empleado categoriesFor: #initEmpleadoSalario:antiguedad:nombre:apellido:!public! !

!Empleado categoriesFor: #modiAntiguedad:!public! !

!Empleado categoriesFor: #verAntiguedad!public! !

!Empleado categoriesFor: #verSalario!public! !

!Empleado class methodsFor!
crearEmpleadoNombre: unNombre apellido: unApellido salario:unSalario antiguedad:suAntiguedad
^(self new) initEmpleadoSalario: unSalario antiguedad: suAntiguedad nombre: unNombre apellido: unApellido.! !
!Empleado class categoriesFor: #crearEmpleadoNombre:apellido:salario:antiguedad:!public! !

!Empleado class categoriesFor: #crearEmpleadoNombre:apellido:salario:antiguedad:!public! !

!

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{4d54f059-4431-4d85-9937-e61d0827e7b3}')!

Persona guid: (GUID fromString: '{4D54F059-4431-4D85-9937-E61D0827E7B3}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
initPersonaNombre: unNombre apellido: unApellido
	nombre := unNombre.
	apellido := unApellido.! !
!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona methodsFor!
verApellido
	^apellido.! !
!Persona categoriesFor: #verApellido!public! !

!Persona methodsFor!
verNombre
	^nombre.! !
!Persona categoriesFor: #verNombre!public! !

!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersonaNombre: unNombre apellido: unApellido
^(self new) initPersonaNombre: unNombre apellido: unApellido.! !
!Persona class categoriesFor: #crearPersonaNombre:apellido:!public! !

!Persona class categoriesFor: #crearPersonaNombre:apellido:!public! !

!

Object subclass: #Habitacion
	instanceVariableNames: 'nroHab tipo estado precioPorNoche'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Habitacion guid: (GUID fromString: '{3a44cb7a-0b34-48b6-85ae-a0d9ea056c8b}')!

Habitacion guid: (GUID fromString: '{3A44CB7A-0B34-48B6-85AE-A0D9EA056C8B}')!
Habitacion comment: ''!

Habitacion comment:
''!
!Habitacion methodsFor!
initHabitacionnro: unNum tipo:unTipo  precioPorNoche: unPrecioPorNoche
nroHab:=unNum.
tipo:=unTipo.
estado:= true.
precioPorNoche:=unPrecioPorNoche.
! !
!Habitacion categoriesFor: #initHabitacionnro:tipo:precioPorNoche:!public! !

!Habitacion methodsFor!
modiEstado:unEstado
estado:=unEstado.! !
!Habitacion categoriesFor: #modiEstado:!public! !

!Habitacion methodsFor!
modinroHab:unNro
nroHab:=unNro.! !
!Habitacion categoriesFor: #modinroHab:!public! !

!Habitacion methodsFor!
modiprecioPorNoche: unPrecioPorNoche
precioPorNoche:=unPrecioPorNoche.! !
!Habitacion categoriesFor: #modiprecioPorNoche:!public! !

!Habitacion methodsFor!
modiTipo:unTipo
tipo:=unTipo.! !
!Habitacion categoriesFor: #modiTipo:!public! !

!Habitacion methodsFor!
verEstado
^estado.! !
!Habitacion categoriesFor: #verEstado!public! !

!Habitacion methodsFor!
verNroHab
^nroHab.! !
!Habitacion categoriesFor: #verNroHab!public! !

!Habitacion methodsFor!
verPrecioPorNoche
^precioPorNoche.! !
!Habitacion categoriesFor: #verPrecioPorNoche!public! !

!Habitacion methodsFor!
verTipo
^tipo.! !
!Habitacion categoriesFor: #verTipo!public! !

"Filed out from Dolphin Smalltalk 7"!

Object subclass: #Persona
	instanceVariableNames: 'nombre apellido'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Persona guid: (GUID fromString: '{4d54f059-4431-4d85-9937-e61d0827e7b3}')!

Persona guid: (GUID fromString: '{4D54F059-4431-4D85-9937-E61D0827E7B3}')!
Persona comment: ''!

Persona comment:
''!
!Persona methodsFor!
initPersonaNombre: unNombre apellido: unApellido
	nombre := unNombre.
	apellido := unApellido.! !
!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona methodsFor!
verApellido
	^apellido.! !
!Persona categoriesFor: #verApellido!public! !

!Persona methodsFor!
verNombre
	^nombre.! !
!Persona categoriesFor: #verNombre!public! !

!Persona categoriesFor: #initPersonaNombre:apellido:!public! !

!Persona categoriesFor: #verApellido!public! !

!Persona categoriesFor: #verNombre!public! !

!Persona class methodsFor!
crearPersonaNombre: unNombre apellido: unApellido
^(self new) initPersonaNombre: unNombre apellido: unApellido.! !
!Persona class categoriesFor: #crearPersonaNombre:apellido:!public! !

!Persona class categoriesFor: #crearPersonaNombre:apellido:!public! !

!

"15:23:00, miércoles, 13 de noviembre de 2024: Image saved"!

"15:23:15, miércoles, 13 de noviembre de 2024: Image saved"!

"15:23:59, miércoles, 13 de noviembre de 2024: Image saved"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.





"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Ver todas las reservas ordenadas por fecha.'; cr.
Transcript show: '10. Modificar el estado de las habitaciones ocupadas que no se encuentren en reservas vigentes.'; cr.
Transcript show: '11. Mostrar las habitaciones ordenadas por numero.'; cr.
Transcript show: '12. Mostrar la cantidad de reservas que realizo cada cliente.'; cr.
Transcript show: '13. Mostrar todos los clientes ordenados por numero.'; cr.
Transcript show: '0. Salir del programa.'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 0 para salir del sistema:  ') asNumber.
[op ~= 0] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 9) ifTrue: [
				"Verifico que haya reservas cargadas."
				 col := hotel todasLasReservas.
				(col isEmpty) 
					ifFalse:[
						"Elijo en que orden mostrar las reservas."
						opcion := (Prompter prompt: 'Elija el orden de las reservas: 1 para Ascendente, 2 para Descendente' ) asNumber.				
						(opcion = 1 or: [opcion = 2]) 
							ifFalse: [					
								Transcript show: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'; cr.
								MessageBox warning: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'.					
								Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]				
					ifTrue: [
						orden := (opcion = 1).					
						Transcript show: 'Reservas ordenadas por fecha: '; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					
						"Se utiliza una SortedCollection para ordernar las reservas en funcion de la opcion elegida."
						reservasOrdenadas := col asSortedCollection: [:reserva1 :reserva2 | orden
							ifTrue: [reserva1 verFechaInicio <= reserva2 verFechaInicio]
							ifFalse: [reserva1 verFechaInicio >= reserva2 verFechaInicio]].
							

						reservasOrdenadas do: [:reserva | 
							Transcript show: 'Fecha de Inicio:', reserva verFechaInicio printString; cr.
							Transcript show: 'Fecha de Fin:', reserva verFechaFin printString; cr.
							Transcript show: 'Estado de la Reserva:', reserva verEstadoReserva printString; cr.
							Transcript show: 'Cantidad de Huespedes:', reserva cantHuesped printString; cr.
							Transcript show: 'Numero de Habitacion:', reserva verNumeroHabitacion printString; cr.
							Transcript show: 'Numero de Cliente:', reserva verNumeroCliente printString; cr.
							Transcript show: 'Numero de Reserva:', reserva verNumeroReserva printString; cr.
							Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].
					] ifTrue: [
					"Si no hay reservas, devuelvo un mensaje de error."
					Transcript show: 'Error: No hay reservas para mostrar'; cr.
					MessageBox warning: 'Error: No hay reservas para mostrar.'.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].
	(op = 10) ifTrue: [
				"Obtengo todas las reservas"
				col := hotel todasLasReservas.
				"Obtengo las reservas vigentes."
				col2 := hotel reservasVigentes.
				"Obtengo la fecha actual."
				fechaActual := Date today.
				"Filtro las reservas que ya hayan finalizado."
				reservasFinalizadas := col select: [:reserva | reserva verFechaFin < fechaActual].
				"Utilizo un collect para formar una coleccion con los numeros de habitacion de las reservas finalizadas."
				habitacionesParaActualizar := reservasFinalizadas collect: [:reserva | reserva verNumeroHabitacion ].				
				"Recupero las habitaciones "
				habitacionesParaActualizar do: [:nroHab |
					habitacion := hotel buscarHabitacionPorNumero: nroHab.
					"Verifico que la habitacion no este en alguna reserva vigente."
					(col2 detect: [:reserva | reserva verNumeroHabitacion  = nroHab] ifNone: [nil]) isNil ifTrue: [
						habitacion modiEstado: true.
						Transcript show: 'Habitacion ', nroHab printString, ' marcada como disponible.'; cr.]
				].
					
	].

	(op = 11) ifTrue: [| habitacionesOrdenadas|
		col := hotel todasLasHabitaciones.
		opcion := (Prompter prompt: '1 para ordenar de manera descendiente 2 para ascendente')asNumber.
		orden := (opcion = 1).
		"orden := false ."
		reservasOrdenadas:= col asSortedCollection: [:habitacion1 :habitacion2 |orden
		ifTrue: [habitacion1 verNroHab <= habitacion2 verNroHab]
		ifFalse: [habitacion1 verNroHab >= habitacion2 verNroHab]].
		
		reservasOrdenadas do: [:habitacion |Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show:'----------------------------------------------------------------------------------------------';cr.].
	].
	(op = 12) ifTrue: [col := hotel todasLasReservas.
				clientes := OrderedCollection new.
				hotel todasLasReservas do: [:reserva | clientes add: reserva verNumeroCliente ].
				cantUnica := clientes asSet.
				diccionario := Dictionary new.
					
				cantUnica do: [:cant | diccionario at: cant put: (clientes occurrencesOf: cant )].

				diccionario keysDo: [:key |
					Transcript show: 'El cliente Nro '.
					key printOn: Transcript.
					Transcript nextPutAll: ' realizo '.
					(diccionario at: key) printOn: Transcript.
					Transcript show: ' reserva/s'.
					Transcript cr.
				].
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].

	(op = 13) ifTrue: [			
	col := hotel todosLosClientes.
	(col isEmpty) 
		ifFalse: [					
			opcion := (Prompter prompt: 'Elija el orden de los Clientes: 1 para Ascendente, 2 para Descendente') asNumber.				
			(opcion = 1 or: [opcion = 2]) 
				ifFalse: [					
					Transcript show: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'; cr.
					MessageBox warning: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'.					
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				]
				ifTrue: [
					orden := (opcion = 1).					
					Transcript show: 'Reservas ordenadas por Nro de Cliente '; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					
					clientesOrdenados := col asSortedCollection: [:cliente1 :cliente2 | 
						orden ifTrue: [cliente1 verNroCliente <= cliente2 verNroCliente]
							  ifFalse: [cliente1 verNroCliente >= cliente2 verNroCliente]
					].

					clientesOrdenados do: [:cliente | 
						Transcript show: 'Número de Cliente: ', cliente verNroCliente printString; cr.
						Transcript show: 'Nombre: ', cliente verNombre printString; cr.
						Transcript show: 'Apellido: ', cliente verApellido printString; cr.
						Transcript show: 'Dirección: ', cliente verDireccion printString; cr.
						Transcript show: 'Teléfono: ', cliente verTelefono printString; cr.
						Transcript show: 'Correo electrónico: ', cliente verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].
				].
		]
		ifTrue: [
			Transcript show: 'No hay clientes en la lista.'; cr.
			Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
		].
].

		
				
				


	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 0 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Ver todas las reservas ordenadas por fecha.'; cr.
	Transcript show: '10. Modificar el estado de las habitaciones ocupadas que no se encuentren en reservas vigentes..'; cr.
	Transcript show: '11. Mostrar las habitaciones ordenadas por numero.'; cr.
	Transcript show: '12. Mostrar la cantidad de reservas que realizo cada cliente.'; cr.
	Transcript show: '13. Mostrar todos los clientes ordenados por numero.'; cr.
	Transcript show: '0. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					
!

"15:25:12, miércoles, 13 de noviembre de 2024: Image saved"!

"15:26:20, miércoles, 13 de noviembre de 2024: Dolphin Smalltalk Professional started"!


"CREAR HOTEL"
hotel:= Hotel crearHotelnom: 'Costa Galana'  dir: 'Av. Peralta ramos 5725' cal: 4.6 tel: '0223 410-5000'.

"Pre carga de datos"

habitacionPreCarga := Habitacion crearHabitacionnroHab: 101 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 102 tipo: 'Doble' precioPorNoche: 2500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga :=  Habitacion crearHabitacionnroHab: 103 tipo: 'Suite' precioPorNoche: 5000.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 104 tipo: 'Triple' precioPorNoche: 3500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 105 tipo: 'Familiar' precioPorNoche: 4500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 106 tipo: 'Individual' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.
habitacionPreCarga := Habitacion crearHabitacionnroHab: 107 tipo: 'Suite' precioPorNoche: 1500.
hotel agregarHabitacion: habitacionPreCarga.


clientePreCarga := Cliente crearClienteNombre: 'Juan' apellido: 'Pérez' direccion: 'Calle Ficticia 123' telefono: '223 1234567' correo: 'juan.perez@example.com' nroCliente: 01.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'María' apellido: 'Gómez' direccion: 'Av. Libertad 456' telefono: '223 7654321' correo: 'maria.gomez@example.com' nroCliente: 02.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Carlos' apellido: 'Martínez' direccion: 'Calle 9 de Julio 789' telefono: '223 9876543' correo: 'carlos.martinez@example.com' nroCliente: 03.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Laura' apellido: 'Rodríguez' direccion: 'Calle San Martín 1010' telefono: '223 2468101' correo: 'laura.rodriguez@example.com' nroCliente: 04.
hotel agregarCliente: clientePreCarga.
clientePreCarga := Cliente crearClienteNombre: 'Pedro' apellido: 'Díaz' direccion: 'Calle Belgrano 2020' telefono: '223 1122334' correo: 'pedro.diaz@example.com' nroCliente: 05.
hotel agregarCliente: clientePreCarga.




"Prueba Menu con aplicacion funcional"

Transcript clear;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' ;
cr;
show: '--------------------------------------------------------------------------------------------- Bienvenido a  ',  hotel verNombre printString , '----------------------------------------------------------------------------------------';
cr;
show: '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
cr.
Transcript show: 'Seleccione una opcion: '; cr.
Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
Transcript show: '3. Realizar una nueva reserva.'; cr.
Transcript show: '4. Ver las habitaciones por tipo.'; cr.
Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
Transcript show: '7. Ver todas las habitaciones.'; cr.
Transcript show: '8. Ver todos los clientes.'; cr.
Transcript show: '9. Ver todas las reservas ordenadas por fecha.'; cr.
Transcript show: '10. Modificar el estado de las habitaciones ocupadas que no se encuentren en reservas vigentes.'; cr.
Transcript show: '11. Mostrar las habitaciones ordenadas por numero.'; cr.
Transcript show: '12. Mostrar la cantidad de reservas que realizo cada cliente.'; cr.
Transcript show: '13. Mostrar todos los clientes ordenados por numero.'; cr.
Transcript show: '0. Salir del programa.'; cr.
Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

op:= (Prompter prompt: ' Ingrese una opcion o 0 para salir del sistema:  ') asNumber.
[op ~= 0] whileTrue: [
	(op = 1) ifTrue: [ nroHab:= (Prompter prompt: 'Ingrese el Numero de Habitacion: ') asNumber.
					tip:= Prompter prompt: 'Ingrese el tipo de Habitacion: '.
					prec:= (Prompter prompt: 'Ingrese el precio de la Habitacion: ') asNumber.
					
					hab:= Habitacion crearHabitacionnroHab: nroHab tipo: tip precioPorNoche: prec.
					hotel agregarHabitacion: hab.
					MessageBox notify: 'Habitacion agregada exitosamente!!'.
					Transcript show: 'Se registro la habitacion correctamente' ;cr].

	(op = 2 ) ifTrue: [ nroClient:= (Prompter prompt: 'Ingrese el Numero del Cliente: ') asNumber.
					n:= Prompter prompt: 'Ingrese el nombre del Cliente: '.
					a:= Prompter prompt: 'Ingrese el apellido del Cliente: '.
					d:= Prompter prompt: 'Ingrese la direccion del cliente: '.
					t:= Prompter prompt: 'Ingrese el numero de telefono del cliente: '.
					em:= Prompter prompt: 'Ingrese el correo del cliente: '.
					
					c:= Cliente crearClienteNombre: n apellido: a direccion: d telefono: t correo: em nroCliente: nroClient.
					hotel agregarCliente: c.
					MessageBox notify: 'Cliente agregado exitosamente!!'.
					Transcript show: 'Se registro el cliente correctamente' ;cr].

	(op = 3) ifTrue: [ nroCliente:= (Prompter prompt: 'Ingrese el Numero del cliente para realizar la reserva: ') asNumber.
			cliente:= hotel buscarCliente: nroCliente.
			(cliente ~= nil)  ifTrue: [ ini := Prompter prompt: 'Ingrese la Fecha de inicio de la reserva'.
				fin:= Prompter prompt: 'Ingrese la Fecha de fin de la reserva'.
				cant := Prompter prompt: 'Ingrese la cantidad de huespedes de la reserva'.
				tipoHab:= Prompter prompt: 'Ingrese el Tipo de la habitacion que desea reservar'.

				"Se busca si hay alguna habitacion disponible"

				hab := hotel buscarHabitacionDisponibleTipo: tipoHab.
				(hab ~= nil) ifTrue: [
					nroHab := hab verNroHab.
					res := Prompter prompt: 'Ingrese el numero de reserva'.
					cl := cliente verNroCliente.

					"Creo la reserva"

					reserva := Reserva crearReservaIni: ini Fin: fin cantHuesp: cant numHab: nroHab nroRes: res nroCliente: cl.
					hotel agregarReserva: reserva.

					"Cambio de estado de la habitacion"

					hab modiEstado: false.

					MessageBox notify: 'Reserva agregada exitosamente!!'.
					Transcript show: 'Se registro la reserva correctamente'; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]

				ifFalse: [Transcript show: 'No hay ninguna habitacion disponible'; cr.
				MessageBox warning: ' No hay ninguna habitacion disponible'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].

		] ifFalse: [ Transcript show: 'El cliente no se encuentra registrado'; cr.
				MessageBox warning: 'El cliente no se encuentra registrado'.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].
	].
	
	(op = 4) ifTrue: [ tipSel:= Prompter prompt: 'Ingrese el tipo de habitacion' .

				"Uso de select"

				habTip:= (hotel todasLasHabitaciones) select: [:habitacion | habitacion verTipo = tipSel].
				
				"Chequeo si hay habitaciones de ese tipo"
			
				(habTip isEmpty) ifTrue: [ Transcript show: 'No se encontraron habitaciones del tipo ingresado.'; cr.
									MessageBox warning: 'No hay habitaciones de ese tipo'.]
							  ifFalse: [ Transcript show: 'Habitaciones de tipo: ', tipSel printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habTip do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Estado: ', habitacion verEstado printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].

	(op = 5) ifTrue: [

				"Uso de reject - Muestro todas las habitaciones menos las disponibles"

				 habOp := (hotel todasLasHabitaciones) reject: [:habitacion | habitacion verEstado = true].
				
				(habOp isEmpty) ifTrue: [Transcript show: 'No hay habitaciones ocupadas.'; cr.
								      MessageBox warning: 'No hay habitaciones ocupadas'. ]
							ifFalse: [Transcript show: 'Habitaciones ocupadas:'; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
									habOp do: [:habitacion | 
									Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show: '----------------------------------------------------------------------------------------------------'; cr.].].].


	(op = 6) ifTrue: [

				Transcript show: 'Reservas agrupadas por cantidad de huéspedes:'; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.

				"Creo una coleccion temporal para almacenar todas las cantidades de huespedes de cada resreva"
				cantHuespedReserva := OrderedCollection new.
				
				hotel todasLasReservas do: [:reserva | cantHuespedReserva add: reserva cantHuesped].
			
				"Creo una variable para tener unicamente la cantidad de cada uno"
				
				cantUnica := cantHuespedReserva asSet.

				"Lleno el diccionario con las cantidades de cada reserva"

				diccionario := Dictionary new.

				cantUnica do: [:cant | diccionario at: cant put: (cantHuespedReserva occurrencesOf: cant)].

				"Imprimo el diccionario"
			
				diccionario keysDo: [:key |
					Transcript show: 'La cantidad de reservas con '.
					key printOn: Transcript.
					Transcript nextPutAll: ' huesped son las siguientes:  '.
					(diccionario at: key) printOn: Transcript.
					Transcript cr.
						].
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].

	(op = 7) ifTrue: [
				Transcript show: 'Habitaciones cargadas en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todasLasHabitaciones.
				1 to: (col size ) do: [:i | 
						Transcript show: 'Numero de habitacion: ', (col at: i) verNroHab printString; cr.
						Transcript show: 'Tipo: ', (col at:i) verTipo printString; cr.
						Transcript show: 'Precio por Noche: ', (col at:i) verPrecioPorNoche printString; cr. 
						Transcript show: 'Estado: ', (col at:i)  verEstado printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 8) ifTrue: [
				Transcript show: 'Clientes cargados en el sistema: '; cr.
				Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				col := hotel todosLosClientes.
				1 to: (col size) do: [:i |
						Transcript show: 'Numero de cliente: ', (col at: i) verNroCliente printString; cr.
						Transcript show: 'Nombre: ', (col at: i) verNombre printString; cr.
						Transcript show: 'Apellido: ', (col at: i) verApellido printString; cr.
						Transcript show: 'Direccion: ', (col at: i) verDireccion printString; cr.
						Transcript show: 'Telefono: ', (col at: i) verTelefono printString; cr.
						Transcript show: 'Correo electronico: ', (col at: i) verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].

	(op = 9) ifTrue: [
				"Verifico que haya reservas cargadas."
				 col := hotel todasLasReservas.
				(col isEmpty) 
					ifFalse:[
						"Elijo en que orden mostrar las reservas."
						opcion := (Prompter prompt: 'Elija el orden de las reservas: 1 para Ascendente, 2 para Descendente' ) asNumber.				
						(opcion = 1 or: [opcion = 2]) 
							ifFalse: [					
								Transcript show: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'; cr.
								MessageBox warning: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'.					
								Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]				
					ifTrue: [
						orden := (opcion = 1).					
						Transcript show: 'Reservas ordenadas por fecha: '; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					
						"Se utiliza una SortedCollection para ordernar las reservas en funcion de la opcion elegida."
						reservasOrdenadas := col asSortedCollection: [:reserva1 :reserva2 | orden
							ifTrue: [reserva1 verFechaInicio <= reserva2 verFechaInicio]
							ifFalse: [reserva1 verFechaInicio >= reserva2 verFechaInicio]].
							

						reservasOrdenadas do: [:reserva | 
							Transcript show: 'Fecha de Inicio:', reserva verFechaInicio printString; cr.
							Transcript show: 'Fecha de Fin:', reserva verFechaFin printString; cr.
							Transcript show: 'Estado de la Reserva:', reserva verEstadoReserva printString; cr.
							Transcript show: 'Cantidad de Huespedes:', reserva cantHuesped printString; cr.
							Transcript show: 'Numero de Habitacion:', reserva verNumeroHabitacion printString; cr.
							Transcript show: 'Numero de Cliente:', reserva verNumeroCliente printString; cr.
							Transcript show: 'Numero de Reserva:', reserva verNumeroReserva printString; cr.
							Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].
					] ifTrue: [
					"Si no hay reservas, devuelvo un mensaje de error."
					Transcript show: 'Error: No hay reservas para mostrar'; cr.
					MessageBox warning: 'Error: No hay reservas para mostrar.'.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.]].
	(op = 10) ifTrue: [
				"Obtengo todas las reservas"
				col := hotel todasLasReservas.
				"Obtengo las reservas vigentes."
				col2 := hotel reservasVigentes.
				"Obtengo la fecha actual."
				fechaActual := Date today.
				"Filtro las reservas que ya hayan finalizado."
				reservasFinalizadas := col select: [:reserva | reserva verFechaFin < fechaActual].
				"Utilizo un collect para formar una coleccion con los numeros de habitacion de las reservas finalizadas."
				habitacionesParaActualizar := reservasFinalizadas collect: [:reserva | reserva verNumeroHabitacion ].				
				"Recupero las habitaciones "
				habitacionesParaActualizar do: [:nroHab |
					habitacion := hotel buscarHabitacionPorNumero: nroHab.
					"Verifico que la habitacion no este en alguna reserva vigente."
					(col2 detect: [:reserva | reserva verNumeroHabitacion  = nroHab] ifNone: [nil]) isNil ifTrue: [
						habitacion modiEstado: true.
						Transcript show: 'Habitacion ', nroHab printString, ' marcada como disponible.'; cr.]
				].
					
	].

	(op = 11) ifTrue: [| habitacionesOrdenadas|
		col := hotel todasLasHabitaciones.
		opcion := (Prompter prompt: '1 para ordenar de manera descendiente 2 para ascendente')asNumber.
		orden := (opcion = 1).
		"orden := false ."
		reservasOrdenadas:= col asSortedCollection: [:habitacion1 :habitacion2 |orden
		ifTrue: [habitacion1 verNroHab <= habitacion2 verNroHab]
		ifFalse: [habitacion1 verNroHab >= habitacion2 verNroHab]].
		
		reservasOrdenadas do: [:habitacion |Transcript show: 'Número de habitación: ', habitacion verNroHab printString; cr.
									Transcript show: 'Tipo: ', habitacion verTipo printString; cr. 
									Transcript show: 'Precio por Noche: ', habitacion verPrecioPorNoche printString; cr.
									Transcript show:'----------------------------------------------------------------------------------------------';cr.].
	].
	(op = 12) ifTrue: [col := hotel todasLasReservas.
				clientes := OrderedCollection new.
				hotel todasLasReservas do: [:reserva | clientes add: reserva verNumeroCliente ].
				cantUnica := clientes asSet.
				diccionario := Dictionary new.
					
				cantUnica do: [:cant | diccionario at: cant put: (clientes occurrencesOf: cant )].

				diccionario keysDo: [:key |
					Transcript show: 'El cliente Nro '.
					key printOn: Transcript.
					Transcript nextPutAll: ' realizo '.
					(diccionario at: key) printOn: Transcript.
					Transcript show: ' reserva/s'.
					Transcript cr.
				].
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].

	(op = 13) ifTrue: [			
	col := hotel todosLosClientes.
	(col isEmpty) 
		ifFalse: [					
			opcion := (Prompter prompt: 'Elija el orden de los Clientes: 1 para Ascendente, 2 para Descendente') asNumber.				
			(opcion = 1 or: [opcion = 2]) 
				ifFalse: [					
					Transcript show: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'; cr.
					MessageBox warning: 'Error: Opcion no valida. Por favor, ingrese 1 o 2.'.					
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
				]
				ifTrue: [
					orden := (opcion = 1).					
					Transcript show: 'Reservas ordenadas por Nro de Cliente '; cr.
					Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					
					clientesOrdenados := col asSortedCollection: [:cliente1 :cliente2 | 
						orden ifTrue: [cliente1 verNroCliente <= cliente2 verNroCliente]
							  ifFalse: [cliente1 verNroCliente >= cliente2 verNroCliente]
					].

					clientesOrdenados do: [:cliente | 
						Transcript show: 'Número de Cliente: ', cliente verNroCliente printString; cr.
						Transcript show: 'Nombre: ', cliente verNombre printString; cr.
						Transcript show: 'Apellido: ', cliente verApellido printString; cr.
						Transcript show: 'Dirección: ', cliente verDireccion printString; cr.
						Transcript show: 'Teléfono: ', cliente verTelefono printString; cr.
						Transcript show: 'Correo electrónico: ', cliente verCorreo printString; cr.
						Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
					].
				].
		]
		ifTrue: [
			Transcript show: 'No hay clientes en la lista.'; cr.
			Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
		].
].

		
				
				


	"Pregunta por opcion o cerrar el menu"
	op := (Prompter prompt: ' Ingrese una opcion o 0 para salir del sistema: ') asNumber.

	"Una vez seleccionado una opcion, limpio el menu previo e informacion previa"
	Transcript clear.
	Transcript show: 'Seleccione una opcion: '; cr.
	Transcript show: '1. Cargar nuevas habitaciones en el hotel.'; cr.
	Transcript show: '2. Cargar nuevos clientes en el hotel.'; cr.
	Transcript show: '3. Realizar una nueva reserva.'; cr.
	Transcript show: '4. Ver las habitaciones por tipo.'; cr.
	Transcript show: '5. Ver las habitaciones ocupadas.'; cr.
	Transcript show: '6. Mostrar cantidad de reservas por cantidad de huespedes'; cr.
	Transcript show: '7. Ver todas las habitaciones.'; cr.
	Transcript show: '8. Ver todos los clientes.'; cr.
	Transcript show: '9. Ver todas las reservas ordenadas por fecha.'; cr.
	Transcript show: '10. Modificar el estado de las habitaciones ocupadas que no se encuentren en reservas vigentes..'; cr.
	Transcript show: '11. Mostrar las habitaciones ordenadas por numero.'; cr.
	Transcript show: '12. Mostrar la cantidad de reservas que realizo cada cliente.'; cr.
	Transcript show: '13. Mostrar todos los clientes ordenados por numero.'; cr.
	Transcript show: '0. Salir del programa'; cr.
	Transcript show: '----------------------------------------------------------------------------------------------------'; cr.
	].
					
					
					!

"15:27:25, miércoles, 13 de noviembre de 2024: Image saved"!
